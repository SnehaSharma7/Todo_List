import {
  useDeletebyIdMutation,
  useGetAllToDoListLazyQuery,
  useInsertbyNameMutation,
  useUpdateNamebyIdMutation,
  useUpdateStatusbyIdMutation,
} from "@/libs/database/src/operations/todo.hasura.operation";
import { create } from "domain";
import Head from "next/head";
import React, { useEffect, useState } from "react";

export default function Home() {
  const [targetId, setTargetId] = useState(null);
  const [formValues, setformValues] = useState({ name: "", body: "" });

  const [
    insertbyNameMutation,
    {
      data: insertbyName,
      loading: insertbyNameLoading,
      error: insertbyNameError,
    },
  ] = useInsertbyNameMutation({ fetchPolicy: "network-only" });

  const [
    deletebyIdMutation,
    {
      data: deletebyId,
      loading: deletebyIdLoading,
      error: deletebyIddeletebyIdError,
    },
  ] = useDeletebyIdMutation({ fetchPolicy: "network-only" });

  const [
    updateNamebyIdMutation,
    {
      data: updateNamebyId,
      loading: updateNamebyIdLoading,
      error: updateNamebyIdError,
    },
  ] = useUpdateNamebyIdMutation();

  const [
    updateStatusbyIdMutation,
    {
      data: updateStatusbyId,
      loading: updateStatusbyIdLoading,
      error: updateStatusbyIdError,
    },
  ] = useUpdateStatusbyIdMutation({ fetchPolicy: "network-only" });

  const [
    GetAllToDoListQuery,
    {
      data: getAllToDoList,
      loading: getAllToDoListLoading,
      error: getAllToDoListError,
    },
  ] = useGetAllToDoListLazyQuery({ fetchPolicy: "network-only" });
  useEffect(() => {
    GetAllToDoListQuery();
  }, []);

  console.log(getAllToDoList);

  const onChangeInputFields = (event: React.ChangeEvent<HTMLInputElement>) => {
    setformValues({ ...formValues, [event.target.name]: event.target.value });
  };

  const createNote = async (e: any) => {
    e.preventDefault();
    console.log(formValues, targetId);
    if (!targetId) {
      insertbyNameMutation({
        variables: {
          name: formValues.name,
          body: formValues.body,
        },
      }).then(() => {
        GetAllToDoListQuery();
        setTargetId(null);
        setformValues({
          name: "",
          body: "",
        });
      });
    } else {
      updateNamebyIdMutation({
        variables: {
          id: targetId,
          name: formValues.name,
          body: formValues.body,
        },
      }).then(() => {
        GetAllToDoListQuery();
        setTargetId(null);
        setformValues({
          name: "",
          body: "",
        });
      });
    }
  };
  const deleteTodo = (id: string) => {
    setTargetId(id);
    deletebyIdMutation({
      variables: {
        id: id,
      },
    })
      .then(() => {
        GetAllToDoListQuery();
        setTargetId(null);
      })
      .catch((err) => {
        console.log(err);
      });
  };
  const updateName = (id: string, name: string, body: string) => {
    setTargetId(id);
    setformValues({ name: name, body: body });
  };

  const updateStatus = (id: string, status: Boolean) => {
    updateStatusbyIdMutation({
      variables: {
        id: id,
        status: !status,
      },
    }).then(() => {
      GetAllToDoListQuery();
    });
  };
  return (
    <>
      <Head>
        <title>ToDo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <form onSubmit={createNote}>
          <div className="form-group" style={{ border: "2px solid grey" }}>
            <label className="form-control-label">Task Name</label>
            <input
              onChange={onChangeInputFields}
              type="text"
              name="name"
              id="name"
              required
              value={formValues.name}
              className="form-control"
              placeholder="Enter your task name"
              style={{
                margin: "4px",
                padding: "5px",
                width: "relative",
                border: "2px solid black",
              }}
            />
            <label className="form-control-label" style={{ display: "flex" }}>
              Task
            </label>
            <textarea
              onChange={onChangeInputFields}
              id="body"
              name="body"
              rows="4"
              cols="50"
              value={formValues.body}
              placeholder="Add your task here"
              style={{
                margin: "4px",
                padding: "5px",
                border: "2px solid black",
              }}
            ></textarea>
            {insertbyNameLoading && "loading"}
            <button
              type="submit"
              className="btn btn-outline-primary"
              style={{ display: "flex" }}
            >
              {targetId ? "Update" : "Create"}
            </button>
          </div>
        </form>
      </div>
      <div style={{ display: "flex", gap: "15px", flexWrap: "wrap" }}>
        {getAllToDoList?.ToDo_List.map((Todo) => {
          return (
            <div
              style={{
                width: "400px",
                border: "2px solid grey",
                padding: "5px",
                margin: "10px",
                // backgroundColor: `${Todo.status ? "green" : ""}`,
              }}
            >
              {/* <div>
                <div>
                  <p>{Todo.created_at}</p>
                </div>
                <div>
                  <p>{Todo.updated_at}</p>
                </div>
              </div> */}
              {/* <div>
                <p>{Todo.id}</p>
              </div> */}
              <div>
                <p>{Todo.name}</p>
              </div>
              <div>
                <p>{Todo.body}</p>
              </div>
              {/* <div>
                <p>{Todo.status}</p>
              </div> */}
              <div>
                <button onClick={() => deleteTodo(Todo.id)}>
                  {deletebyIdLoading && targetId === Todo.id
                    ? "Deleting"
                    : "delete"}
                </button>
                <button
                  onClick={() => updateName(Todo.id, Todo.name, Todo.body)}
                >
                  {updateNamebyIdLoading && targetId === Todo.id
                    ? "Updating"
                    : "Update"}
                </button>
                <button
                  onClick={() => updateStatus(Todo.id, Todo.status)}
                  style={{ backgroundColor: `${Todo.status ? "green" : ""}` }}
                >
                  Done
                </button>
              </div>
            </div>
          );
        })}
      </div>
    </>
  );
}
